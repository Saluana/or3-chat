{
    "title": "OR3 Docs",
    "description": "Documentation for the OR3 project",
    "version": "1.0.0",
    "sections": [
        {
            "title": "Composables",
            "path": "/composables",
            "files": [
                {
                    "name": "useActivePrompt.md",
                    "path": "/composables/useActivePrompt",
                    "category": "Chat",
                    "summary": "Reactive composable that manages the currently selected system prompt for chat conversations.\\n\\nThis composable provides a module-singleton selection state (id + content) so multiple components\\nand composables can read the active system prompt consistently without creating duplicate refs.\\n\\nIt integrates with the local prompt database (`~/db/prompts`) to load prompt content and emits a\\nhook event after a prompt is selected so other subsystems can react."
                },
                {
                    "name": "useAiSettings.md",
                    "path": "/composables/useAiSettings",
                    "category": "Chat",
                    "summary": "`useAiSettings` gives you a reactive settings object and helper methods to read, update, and reset AI chat preferences. It sanitises input, survives hot-module reloads, and only touches storage in the browser.\\n\\n-   Tracks the current settings in a single global store (HMR-safe)\\n-   Loads initial values from `localStorage` once per session\\n-   Persists updates automatically\\n-   Normalises user input to avoid bad types or unknown keys"
                },
                {
                    "name": "useChat.md",
                    "path": "/composables/useChat",
                    "category": "Chat",
                    "summary": "`useChat` is the heart of every chat conversation. When you want to:\\n\\n-   Send a message to an AI model\\n-   Display a conversation with streaming responses\\n-   Retry a failed message\\n-   Show loading states while the AI is thinking\\n-   Cancel an ongoing AI response"
                },
                {
                    "name": "useChatInputBridge.md",
                    "path": "/composables/useChatInputBridge",
                    "category": "Chat",
                    "summary": "Lightweight registry that lets external features (pane plugins, slash commands, automation) inject chat messages into an existing chat input without duplicating business logic. `useChatInputBridge` exposes a tiny, reactive directory of chat inputs keyed by `paneId`. Chat containers register their imperative API and the bridge forwards programmatic sends through the same UI pipeline a user click would trigger.\\n\\n-   Keeps message handling inside `ChatInputDropper`\\n-   Avoids rehydrating chat state or bypassing hooks\\n-   Supports multiple panes/windows\\n-   Safe in dev (HMR-resilient)"
                },
                {
                    "name": "useDefaultPrompt.md",
                    "path": "/composables/useDefaultPrompt",
                    "category": "Chat",
                    "summary": "`useDefaultPrompt` gives you a reactive `defaultPromptId` alongside helpers to set or clear it. It wraps the `kv` table, keeps a singleton ref of the active prompt ID, and fires hooks when the default changes so other modules can react."
                },
                {
                    "name": "useMessageActions.md",
                    "path": "/composables/useMessageActions",
                    "category": "Chat",
                    "summary": "Extensible action registry for chat messages. Lets core UI and plugins add contextual buttons (copy, retry, favorite, etc.) in a consistent order with minimal wiring. Maintains a global list of action descriptors keyed by an id. Components register their actions once, and when rendering an individual message you can pull the filtered, sorted list for that message’s role."
                },
                {
                    "name": "useMessageEditing.md",
                    "path": "/composables/useMessageEditing",
                    "category": "Chat",
                    "summary": "Encapsulates the UI + persistence flow for editing a chat message. Handles toggling edit mode, keeping a draft buffer, and writing the updated content back to Dexie.\\n\\n`useMessageEditing` wraps all state required for an inline message editor:\\n\\n-   Tracks whether the message is currently being edited\\n-   Keeps a draft copy of the text with undo (cancel) support\\n-   Persists the change to the `messages` table via `upsert`\\n-   Works with plain objects or `Ref`-wrapped messages (streaming tail vs finalized)"
                },
                {
                    "name": "useModelStore.md",
                    "path": "/composables/useModelStore",
                    "category": "Chat",
                    "summary": "Shared catalog + favorites manager for OpenRouter models. Centralises fetching, caching, and filtering so every pane sees the same list without repeated network hits.\\n\\n`useModelStore` exposes reactive state for the model catalog, favorites, search query, and filters. It layers three cache tiers (memory → Dexie → network) and dedupes concurrent fetches. Consumers can refresh, invalidate, or persist favorites with a single call.\\n\\n-   Hydrates catalog from memory, Dexie (`kv` table), or network\\n-   Persists the catalog in Dexie for 48 hours by default\\n-   Dedupes in-flight fetches across callers\\n-   Manages favorites with persistence to `kv`\\n-   Exposes helper refs for search/filter UI"
                },
                {
                    "name": "useStreamAccumulator.md",
                    "path": "/composables/useStreamAccumulator",
                    "category": "Chat",
                    "summary": "Frame-batched accumulator for AI streaming tokens. It receives partial text/reasoning deltas, buffers them, and flushes at most once per animation frame so the UI stays smooth.\\n\\n`useStreamAccumulator` replaces ad-hoc refs for building assistant responses. It normalises streaming flow with a single API:\\n\\n-   `append()` collects text or reasoning deltas without immediate DOM churn\\n-   `finalize()` seals the stream and records errors/abort state\\n-   `reset()` prepares for the next stream\\n-   `state` exposes reactive fields (`text`, `reasoningText`, `isActive`, etc.) any component can watch\\n\\nThe accumulator automatically batches writes via `requestAnimationFrame` when available, falling back to microtasks in environments without rAF (tests, SSR stubs)."
                },
                {
                    "name": "useDocumentHistoryActions.md",
                    "path": "/composables/useDocumentHistoryActions",
                    "category": "Documents",
                    "summary": "Registry composable that lets plugins inject extra actions into the document history sidebar menu. Keeps a global list of action buttons, sorts them, and survives HMR so dashboard add-ons can extend the UI safely."
                },
                {
                    "name": "useDocumentsList.md",
                    "path": "/composables/useDocumentsList",
                    "category": "Documents",
                    "summary": "Lightweight fetch-and-refresh composable for the documents sidebar. Loads recent Dexie `documents` entries, trims heavy fields, and keeps the list fresh when database hooks fire."
                },
                {
                    "name": "useDocumentsStore.md",
                    "path": "/composables/useDocumentsStore",
                    "category": "Documents",
                    "summary": "Stateful document manager that loads Dexie records, stages edits, debounces autosaves, and coordinates pane-level hooks. It is the backbone for rich text documents in OR3’s multi-pane UI. `useDocumentsStore` exposes a suite of helpers around a shared `documentsMap` cache."
                },
                {
                    "name": "useEditorNodes.md",
                    "path": "/composables/useEditorNodes",
                    "category": "Editor",
                    "summary": "Registry trio that lets plugins add TipTap nodes, marks, and extensions to the OR3 editor without patching the core component. Maintains global maps, keeps ordering stable, and plays nicely with HMR. `useEditorNodes` exports helpers that manage three registries:\\n\\n-   `registerEditorNode` / `listEditorNodes` for TipTap `Node` extensions.\\n-   `registerEditorMark` / `listEditorMarks` for TipTap `Mark` extensions.\\n-   `registerEditorExtension` / `listEditorExtensions` for generic TipTap extensions.\\n\\nEach registry sorts entries by `order` (default 200) and stores them on `globalThis` so reloads don’t duplicate items.\\n"
                },
                {
                    "name": "useEditorToolbar.md",
                    "path": "/composables/useEditorToolbar",
                    "category": "Editor",
                    "summary": "Toolbar registry for the TipTap editor. Lets plugins add buttons, toggles, or dropdowns to the retro editor header while keeping the UI reactive and order-aware. `useEditorToolbar` exposes helpers to manage toolbar buttons:\\n\\n-   `registerEditorToolbarButton()` adds or replaces a button definition.\\n-   `useEditorToolbarButtons(editorRef)` returns a computed, filtered, and sorted array of buttons ready to render.\\n-   `unregisterEditorToolbarButton()` cleans up during teardown/HMR.\\n-   `listRegisteredEditorToolbarButtonIds()` lets authors inspect the registry.\\n\\nButtons can customise visibility, active state, icons, ordering, and click behaviour."
                },
                {
                    "name": "useComposerActions.md",
                    "path": "/composables/useComposerActions",
                    "category": "Sidebar",
                    "summary": "Composer action registry powering the quick-action buttons beneath the chat composer. Lets plugins add buttons that hook into the active editor, thread, or pane context with visibility and disabled logic."
                },
                {
                    "name": "useHeaderActions.md",
                    "path": "/composables/useHeaderActions",
                    "category": "Sidebar",
                    "summary": "Sidebar header action registry that powers the icon buttons in the chrome header (new thread, toggle layout, etc.). Lets plugins contribute actions that react to route, breakpoint, or custom context."
                },
                {
                    "name": "useDashboardPlugins.md",
                    "path": "/composables/useDashboardPlugins",
                    "category": "Dashboard",
                    "summary": "Dashboard extension hub that lets first- and third-party features register launcher tiles, lazy-loaded pages, and capability flags for the retro dashboard. It centralises plugin discovery, page resolution, and in-app navigation state. Useful for plugin settings, onboarding flows, or custom tools."
                },
                {
                    "name": "usePaneDocuments.md",
                    "path": "/composables/usePaneDocuments",
                    "category": "Documents",
                    "summary": "Pane-aware controller that lets the dashboard create or switch documents inside the multi-pane workspace. It glues `useDocumentsStore`, pane state, and hook events into two ergonomic methods."
                },
                {
                    "name": "useProjectTreeActions.md",
                    "path": "/composables/useProjectTreeActions",
                    "category": "Projects",
                    "summary": "Extensible action registry for the project tree sidebar. Lets plugins add context buttons to project rows or child entries (documents, chats) with ordering and visibility controls."
                },
                {
                    "name": "useProjectsCrud.md",
                    "path": "/composables/useProjectsCrud",
                    "category": "Projects",
                    "summary": "Project CRUD toolkit that wraps Dexie helpers with validation, timestamping, and data normalisation for OR3 project records."
                },
                {
                    "name": "useSidebarSearch.md",
                    "path": "/composables/useSidebarSearch",
                    "category": "Sidebar",
                    "summary": "Unified search composable that indexes threads, projects, and documents for the sidebar search bar. Uses Orama for fast client-side search with a substring fallback to guarantee results."
                },
                {
                    "name": "useSidebarSections.md",
                    "path": "/composables/useSidebarSections",
                    "category": "Sidebar",
                    "summary": "Sidebar chrome registry that lets plugins add new panels (top/main/bottom stacks) and footer actions to the OR3 sidebar. Provides ordering, placement, visibility, and disabled control."
                },
                {
                    "name": "useThreadHistoryActions.md",
                    "path": "/composables/useThreadHistoryActions",
                    "category": "Threads",
                    "summary": "Registry for adding custom actions to the thread history sidebar dropdown. Mirrors the document history registry but targets threads, letting plugins inject export, share, or workflow buttons."
                },
                {
                    "name": "useThreadSearch.md",
                    "path": "/composables/useThreadSearch",
                    "category": "Threads",
                    "summary": "Thread-specific search composable that powers the sidebar query field. Builds a small Orama index over thread titles, debounces input, and falls back to substring matching when required."
                },
                {
                    "name": "useHookEffect.md",
                    "path": "/composables/useHookEffect",
                    "category": "Core"
                },
                {
                    "name": "useMultiPane.md",
                    "path": "/composables/useMultiPane",
                    "category": "Core"
                },
                {
                    "name": "usePanePrompt.md",
                    "path": "/composables/usePanePrompt",
                    "category": "Core"
                },
                {
                    "name": "usePreviewCache.md",
                    "path": "/composables/usePreviewCache",
                    "category": "Core"
                },
                {
                    "name": "useWorkspaceBackup.md",
                    "path": "/composables/useWorkspaceBackup",
                    "category": "Core"
                }
            ]
        },
        {
            "title": "Hooks",
            "path": "/hooks",
            "files": [
                {
                    "name": "hook-catalog.md",
                    "path": "/hooks/hook-catalog",
                    "category": "Reference"
                },
                {
                    "name": "hooks.md",
                    "path": "/hooks/hooks",
                    "category": "Core"
                },
                {
                    "name": "typed-hooks.md",
                    "path": "/hooks/typed-hooks",
                    "category": "Core"
                },
                {
                    "name": "hook-types.md",
                    "path": "/hooks/hook-types",
                    "category": "Types"
                },
                {
                    "name": "hook-keys.md",
                    "path": "/hooks/hook-keys",
                    "category": "Types"
                },
                {
                    "name": "useHooks.md",
                    "path": "/hooks/useHooks",
                    "category": "Integration"
                }
            ]
        },
        {
            "title": "Database",
            "path": "/database",
            "files": [
                {
                    "name": "attachments.md",
                    "path": "/database/attachments",
                    "category": "Entities"
                },
                {
                    "name": "branching.md",
                    "path": "/database/branching",
                    "category": "Threads"
                },
                {
                    "name": "client.md",
                    "path": "/database/client",
                    "category": "Core"
                },
                {
                    "name": "dbTry.md",
                    "path": "/database/dbTry",
                    "category": "Utilities"
                },
                {
                    "name": "documents.md",
                    "path": "/database/documents",
                    "category": "Entities"
                },
                {
                    "name": "files-select.md",
                    "path": "/database/files-select",
                    "category": "Utilities"
                },
                {
                    "name": "files-util.md",
                    "path": "/database/files-util",
                    "category": "Utilities"
                },
                {
                    "name": "files.md",
                    "path": "/database/files",
                    "category": "Entities"
                },
                {
                    "name": "index.md",
                    "path": "/database/index",
                    "category": "Core"
                },
                {
                    "name": "kv.md",
                    "path": "/database/kv",
                    "category": "Entities"
                },
                {
                    "name": "message-files.md",
                    "path": "/database/message-files",
                    "category": "Messages"
                },
                {
                    "name": "messages.md",
                    "path": "/database/messages",
                    "category": "Messages"
                },
                {
                    "name": "posts.md",
                    "path": "/database/posts",
                    "category": "Entities"
                },
                {
                    "name": "projects.md",
                    "path": "/database/projects",
                    "category": "Entities"
                },
                {
                    "name": "prompts.md",
                    "path": "/database/prompts",
                    "category": "Entities"
                },
                {
                    "name": "schema.md",
                    "path": "/database/schema",
                    "category": "Core"
                },
                {
                    "name": "threads.md",
                    "path": "/database/threads",
                    "category": "Threads"
                },
                {
                    "name": "util.md",
                    "path": "/database/util",
                    "category": "Utilities"
                }
            ]
        },
        {
            "title": "Auth",
            "path": "/auth",
            "files": [
                {
                    "name": "useOpenrouter.md",
                    "path": "/auth/useOpenrouter",
                    "category": "Authentication"
                },
                {
                    "name": "useUserApiKey.md",
                    "path": "/auth/useUserApiKey",
                    "category": "Authentication"
                },
                {
                    "name": "openrouter-auth.md",
                    "path": "/auth/openrouter-auth",
                    "category": "Exchange"
                },
                {
                    "name": "openrouter-build.md",
                    "path": "/auth/openrouter-build",
                    "category": "Messages"
                },
                {
                    "name": "models-service.md",
                    "path": "/auth/models-service",
                    "category": "Models"
                }
            ]
        },
        {
            "title": "Types",
            "path": "/types",
            "files": [
                {
                    "name": "hooks.md",
                    "path": "/types/hooks",
                    "category": "Hooks"
                },
                {
                    "name": "database.md",
                    "path": "/types/database",
                    "category": "Database"
                },
                {
                    "name": "composables.md",
                    "path": "/types/composables",
                    "category": "Composables"
                }
            ]
        }
    ]
}
